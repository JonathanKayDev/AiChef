@page "/mealrecipe/{Index:int}"
@using AiChef.Shared
@using System.Text.Json
@using System.Web
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime;

<PageTitle>AI Chef - Meal Recipe</PageTitle>

@if (loaded)
{
    <div class="container page-container mt-sm-5">
        <div class="row row-cols-1 row-cols-md-12">
            <div class="col col-md-4 text-center mb-4">
                <img src="@recipeImageUrl" class="rounded-3 recipeImage" />
            </div>
            <div class="col col-md-8">
                <div class="ms-md-3">
                    <h1 class="fw-bold text-danger">@recipe.Title</h1>
                    <p>@recipe.Summary</p>
                </div>
            </div>
        </div>
        <div class="row row-cols-1 row-cols-md-12">
            <div class="col col-md-4 mt-3">
                <h2>Ingredients</h2>
                <ul>
                    @foreach (var item in recipe.Ingredients)
                    {
                        <li>@item</li>
                    }
                </ul>
            </div>
            <div class="col col-md-8 mt-3">
                <div class="ms-md-3">
                    <h2>Instructions</h2>
                    <ul>
                        @foreach (var item in recipe.Instructions)
                        {
                            <li>@item</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="text-end">
                <button class="btn btn-secondary d-print-none" @onclick="Print">Print</button>
            </div>
        </div>
    </div>
}
else
{
    <ChefSpinner></ChefSpinner>
}






@code {

    [CascadingParameter]
    private RecipeState? recipeState { get; set; }

    [Parameter]
    public int index { get; set; }

    bool loaded = false;

    private string title;
    private string recipeImageUrl = string.Empty;
    private Recipe recipe;

    protected override void OnInitialized()
    {
        GetRecipe();
    }

    private async void GetRecipe()
    {
        string baseuri = "Recipe/GetRecipe";

        title = recipeState.RecipeIdeas.FirstOrDefault(i => i.Index == index).Title;

        RecipeParams recipeParams = new RecipeParams()
            {
                MealTime = recipeState.MealTime,
                Ingredients = recipeState.Ingredients,
                SelectedIdea = title
            };

        try
        {
            // get the recipe image
            HttpResponseMessage responseImage = await httpClient.GetAsync($"Recipe/GetRecipeImage?title={HttpUtility.UrlEncode(title)}");
            var recipeImage = await responseImage.Content.ReadFromJsonAsync<RecipeImage>();
            recipeImageUrl = recipeImage!.Data[0]!.Url;
        }
        catch (Exception ex)
        {
            //TODO - redirection on failed attempt does not work
            Console.WriteLine($"Error: {ex.Message}");
            navigationManager.NavigateTo("mealideas", forceLoad: true);
            throw;
        }

        try
        {
            // get the recipe
            HttpResponseMessage responseRecipe = await httpClient.PostAsJsonAsync(baseuri, recipeParams);
            responseRecipe.EnsureSuccessStatusCode();
            recipe = (await responseRecipe.Content.ReadFromJsonAsync<Recipe>())!;

            // notify web assembly that the state has changed, to update UI
            loaded = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            navigationManager.NavigateTo("mealideas", forceLoad: true);
            throw;
        }

    }

    private async Task Print()
    {
        await jsRuntime.InvokeVoidAsync("printInvoke");
    }
}
